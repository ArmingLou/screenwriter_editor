// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/docx_export.dart';
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.10.0';

  @override
  int get rustContentHash => 883536589;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_screenwriter_editor',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  SimpleConf crateApiDocxExportCreateChineseConfig();

  SimpleConf crateApiDocxExportCreateDefaultConfig();

  SimpleConf crateApiDocxExportCreateEnglishConfig();

  Future<ExportResult> crateApiDocxExportExportToDocx(
      {required String text, required String outputPath, SimpleConf? config});

  String crateApiSimpleGreet({required String name});

  Future<void> crateApiSimpleInitApp();

  Future<ParseResult> crateApiDocxExportParseFountainText(
      {required String text, SimpleConf? config});

  Future<SimpleConf> crateApiDocxExportSimpleConfDefault();

  String crateApiDocxExportTestConnection();
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  SimpleConf crateApiDocxExportCreateChineseConfig() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_simple_conf,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDocxExportCreateChineseConfigConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDocxExportCreateChineseConfigConstMeta =>
      const TaskConstMeta(
        debugName: "create_chinese_config",
        argNames: [],
      );

  @override
  SimpleConf crateApiDocxExportCreateDefaultConfig() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_simple_conf,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDocxExportCreateDefaultConfigConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDocxExportCreateDefaultConfigConstMeta =>
      const TaskConstMeta(
        debugName: "create_default_config",
        argNames: [],
      );

  @override
  SimpleConf crateApiDocxExportCreateEnglishConfig() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_simple_conf,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDocxExportCreateEnglishConfigConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDocxExportCreateEnglishConfigConstMeta =>
      const TaskConstMeta(
        debugName: "create_english_config",
        argNames: [],
      );

  @override
  Future<ExportResult> crateApiDocxExportExportToDocx(
      {required String text, required String outputPath, SimpleConf? config}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(text, serializer);
        sse_encode_String(outputPath, serializer);
        sse_encode_opt_box_autoadd_simple_conf(config, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_export_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDocxExportExportToDocxConstMeta,
      argValues: [text, outputPath, config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDocxExportExportToDocxConstMeta =>
      const TaskConstMeta(
        debugName: "export_to_docx",
        argNames: ["text", "outputPath", "config"],
      );

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGreetConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<ParseResult> crateApiDocxExportParseFountainText(
      {required String text, SimpleConf? config}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(text, serializer);
        sse_encode_opt_box_autoadd_simple_conf(config, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_parse_result,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDocxExportParseFountainTextConstMeta,
      argValues: [text, config],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDocxExportParseFountainTextConstMeta =>
      const TaskConstMeta(
        debugName: "parse_fountain_text",
        argNames: ["text", "config"],
      );

  @override
  Future<SimpleConf> crateApiDocxExportSimpleConfDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_simple_conf,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDocxExportSimpleConfDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDocxExportSimpleConfDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "simple_conf_default",
        argNames: [],
      );

  @override
  String crateApiDocxExportTestConnection() {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiDocxExportTestConnectionConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiDocxExportTestConnectionConstMeta =>
      const TaskConstMeta(
        debugName: "test_connection",
        argNames: [],
      );

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  SimpleConf dco_decode_box_autoadd_simple_conf(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_simple_conf(raw);
  }

  @protected
  ExportResult dco_decode_export_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ExportResult(
      success: dco_decode_bool(arr[0]),
      message: dco_decode_String(arr[1]),
      filePath: dco_decode_opt_String(arr[2]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  SimpleConf? dco_decode_opt_box_autoadd_simple_conf(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_simple_conf(raw);
  }

  @protected
  ParseResult dco_decode_parse_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return ParseResult(
      success: dco_decode_bool(arr[0]),
      message: dco_decode_String(arr[1]),
      pageCount: dco_decode_i_32(arr[2]),
      characterCount: dco_decode_i_32(arr[3]),
      wordCount: dco_decode_i_32(arr[4]),
    );
  }

  @protected
  SimpleConf dco_decode_simple_conf(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 16)
      throw Exception('unexpected arr length: expect 16 but see ${arr.length}');
    return SimpleConf(
      printTitlePage: dco_decode_bool(arr[0]),
      printProfile: dco_decode_String(arr[1]),
      doubleSpaceBetweenScenes: dco_decode_bool(arr[2]),
      printSections: dco_decode_bool(arr[3]),
      printSynopsis: dco_decode_bool(arr[4]),
      printActions: dco_decode_bool(arr[5]),
      printHeaders: dco_decode_bool(arr[6]),
      printDialogues: dco_decode_bool(arr[7]),
      numberSections: dco_decode_bool(arr[8]),
      useDualDialogue: dco_decode_bool(arr[9]),
      printNotes: dco_decode_bool(arr[10]),
      printHeader: dco_decode_String(arr[11]),
      printFooter: dco_decode_String(arr[12]),
      printWatermark: dco_decode_String(arr[13]),
      scenesNumbers: dco_decode_String(arr[14]),
      eachSceneOnNewPage: dco_decode_bool(arr[15]),
    );
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  SimpleConf sse_decode_box_autoadd_simple_conf(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_simple_conf(deserializer));
  }

  @protected
  ExportResult sse_decode_export_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_success = sse_decode_bool(deserializer);
    var var_message = sse_decode_String(deserializer);
    var var_filePath = sse_decode_opt_String(deserializer);
    return ExportResult(
        success: var_success, message: var_message, filePath: var_filePath);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  SimpleConf? sse_decode_opt_box_autoadd_simple_conf(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_simple_conf(deserializer));
    } else {
      return null;
    }
  }

  @protected
  ParseResult sse_decode_parse_result(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_success = sse_decode_bool(deserializer);
    var var_message = sse_decode_String(deserializer);
    var var_pageCount = sse_decode_i_32(deserializer);
    var var_characterCount = sse_decode_i_32(deserializer);
    var var_wordCount = sse_decode_i_32(deserializer);
    return ParseResult(
        success: var_success,
        message: var_message,
        pageCount: var_pageCount,
        characterCount: var_characterCount,
        wordCount: var_wordCount);
  }

  @protected
  SimpleConf sse_decode_simple_conf(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_printTitlePage = sse_decode_bool(deserializer);
    var var_printProfile = sse_decode_String(deserializer);
    var var_doubleSpaceBetweenScenes = sse_decode_bool(deserializer);
    var var_printSections = sse_decode_bool(deserializer);
    var var_printSynopsis = sse_decode_bool(deserializer);
    var var_printActions = sse_decode_bool(deserializer);
    var var_printHeaders = sse_decode_bool(deserializer);
    var var_printDialogues = sse_decode_bool(deserializer);
    var var_numberSections = sse_decode_bool(deserializer);
    var var_useDualDialogue = sse_decode_bool(deserializer);
    var var_printNotes = sse_decode_bool(deserializer);
    var var_printHeader = sse_decode_String(deserializer);
    var var_printFooter = sse_decode_String(deserializer);
    var var_printWatermark = sse_decode_String(deserializer);
    var var_scenesNumbers = sse_decode_String(deserializer);
    var var_eachSceneOnNewPage = sse_decode_bool(deserializer);
    return SimpleConf(
        printTitlePage: var_printTitlePage,
        printProfile: var_printProfile,
        doubleSpaceBetweenScenes: var_doubleSpaceBetweenScenes,
        printSections: var_printSections,
        printSynopsis: var_printSynopsis,
        printActions: var_printActions,
        printHeaders: var_printHeaders,
        printDialogues: var_printDialogues,
        numberSections: var_numberSections,
        useDualDialogue: var_useDualDialogue,
        printNotes: var_printNotes,
        printHeader: var_printHeader,
        printFooter: var_printFooter,
        printWatermark: var_printWatermark,
        scenesNumbers: var_scenesNumbers,
        eachSceneOnNewPage: var_eachSceneOnNewPage);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_simple_conf(
      SimpleConf self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_simple_conf(self, serializer);
  }

  @protected
  void sse_encode_export_result(ExportResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.success, serializer);
    sse_encode_String(self.message, serializer);
    sse_encode_opt_String(self.filePath, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_simple_conf(
      SimpleConf? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_simple_conf(self, serializer);
    }
  }

  @protected
  void sse_encode_parse_result(ParseResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.success, serializer);
    sse_encode_String(self.message, serializer);
    sse_encode_i_32(self.pageCount, serializer);
    sse_encode_i_32(self.characterCount, serializer);
    sse_encode_i_32(self.wordCount, serializer);
  }

  @protected
  void sse_encode_simple_conf(SimpleConf self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.printTitlePage, serializer);
    sse_encode_String(self.printProfile, serializer);
    sse_encode_bool(self.doubleSpaceBetweenScenes, serializer);
    sse_encode_bool(self.printSections, serializer);
    sse_encode_bool(self.printSynopsis, serializer);
    sse_encode_bool(self.printActions, serializer);
    sse_encode_bool(self.printHeaders, serializer);
    sse_encode_bool(self.printDialogues, serializer);
    sse_encode_bool(self.numberSections, serializer);
    sse_encode_bool(self.useDualDialogue, serializer);
    sse_encode_bool(self.printNotes, serializer);
    sse_encode_String(self.printHeader, serializer);
    sse_encode_String(self.printFooter, serializer);
    sse_encode_String(self.printWatermark, serializer);
    sse_encode_String(self.scenesNumbers, serializer);
    sse_encode_bool(self.eachSceneOnNewPage, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }
}
