// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'docx_export.freezed.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `fmt`, `fmt`, `fmt`

/// 测试连接
String testConnection() =>
    RustLib.instance.api.crateApiDocxExportTestConnection();

/// 解析Fountain文本
Future<ParseResult> parseFountainText(
        {required String text, SimpleConf? config}) =>
    RustLib.instance.api
        .crateApiDocxExportParseFountainText(text: text, config: config);

/// 导出DOCX文档
Future<ExportResult> exportToDocx(
        {required String text,
        required String outputPath,
        SimpleConf? config}) =>
    RustLib.instance.api.crateApiDocxExportExportToDocx(
        text: text, outputPath: outputPath, config: config);

/// 创建默认配置
SimpleConf createDefaultConfig() =>
    RustLib.instance.api.crateApiDocxExportCreateDefaultConfig();

/// 创建中文配置
SimpleConf createChineseConfig() =>
    RustLib.instance.api.crateApiDocxExportCreateChineseConfig();

/// 创建英文配置
SimpleConf createEnglishConfig() =>
    RustLib.instance.api.crateApiDocxExportCreateEnglishConfig();

/// 导出结果
@freezed
@immutable
sealed class ExportResult with _$ExportResult {
  const factory ExportResult({
    required bool success,
    required String message,
    String? filePath,
  }) = _ExportResult;
}

/// 解析结果
@freezed
@immutable
sealed class ParseResult with _$ParseResult {
  const factory ParseResult({
    required bool success,
    required String message,
    required int pageCount,
    required int characterCount,
    required int wordCount,
  }) = _ParseResult;
}

/// 简化的配置结构，用于Flutter调用
@freezed
@immutable
sealed class SimpleConf with _$SimpleConf {
  const SimpleConf._();
  const factory SimpleConf({
    required bool printTitlePage,
    required String printProfile,
    required bool doubleSpaceBetweenScenes,
    required bool printSections,
    required bool printSynopsis,
    required bool printActions,
    required bool printHeaders,
    required bool printDialogues,
    required bool numberSections,
    required bool useDualDialogue,
    required bool printNotes,
    required String printHeader,
    required String printFooter,
    required String printWatermark,
    required String scenesNumbers,
    required bool eachSceneOnNewPage,
  }) = _SimpleConf;
  static Future<SimpleConf> default_() =>
      RustLib.instance.api.crateApiDocxExportSimpleConfDefault();
}
